alias la='ls -la'
alias grep='grep --color=auto'
alias vi='nvim'
alias vim='nvim'
alias dev_appserver.py='/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin/dev_appserver.py'
alias myip='curl ifconfig.co/json'

# os x
alias show='defaults write com.apple.finder AppleShowAllFiles true && killall Finder'
alias hide='defaults write com.apple.finder AppleShowAllFiles false && killall Finder'
alias flushdns='sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder'
alias ic='cd ~/Library/Mobile\ Documents/com~apple~CloudDocs'

unmount() {
    if [ ! -d "$1" ]; then
        echo "Specify correct mount point"
        return 1
    fi

    rm -rf "$1/.fseventsd"
    rm -rf "$1/.Trashes"
    rm -rf "$1/.Spotlight-V100"
    find "$1" -name "._*" -exec rm {} \;
    find "$1" -name ".DS_Store" -exec rm {} \;

    diskutil unmount "$1"
}

function attrclean {
    if [ -e $1 ]; then
        echo "Specify the path"
        return 1
    fi

    chmod -RN $1
    xattr -rc $1
}

# tmux
alias ts='tmux ls'
alias ta='tmux attach -t main || tmux new -s main'
alias tk='tmux kill-session -t'
alias tt='tmuxinator start'

# git
alias gs='git status'
alias gd='git diff'
alias gl='git log'
alias gull='git pull'
alias gullr='git pull --rebase'
alias gush='git push'

gerge() {
    if [ -z $1 ]; then
        echo "Specify where to merge current branch"
        return 1
    fi

    BRANCH=$(git symbolic-ref --short HEAD)

    git checkout $1 && git pull --rebase && git merge $BRANCH && git push && git checkout ${BRANCH}
}

# dev
alias fs='foreman start'
alias be='bundle exec'
alias rake='bundle exec rake'
alias rails='bundle exec rails'
alias rspec='bundle exec rspec'
alias guard='bundle exec guard'
alias rackup='bundle exec rackup'
alias shotgun='bundle exec shotgun'
alias resque-work='bundle exec rake resque:work QUEUES=* TERM_CHILD=1'

csrgen() {
    if [ -z $1 ]; then
        echo "Specify FQDN"
        return 1
    fi

    openssl req -newkey rsa:2048 -sha256 -nodes -keyout "${1}.key" -out "${1}.csr"
    openssl x509 -req -days 365 -in "${1}.csr" -signkey "${1}.key" -out "${1}.crt"
}

lvhgen() {
    openssl req -newkey rsa:2048 -x509 -nodes -keyout lvh.me.key -sha256 -days 3650 -new -out lvh.me.crt -subj '/CN=*.lvh.me' -reqexts SAN -extensions SAN -config <(cat /System/Library/OpenSSL/openssl.cnf <(printf '[SAN]\nsubjectAltName=DNS:lvh.me,DNS:*.lvh.me'))
}

pg-recreate() {
    if [ -z $1 ]; then
        echo "Missing database name"
        return 1
    fi

    psql postgres -c "DROP DATABASE $1"
    psql postgres -c "CREATE DATABASE $1"
}

pg-restore() {
    if [ -z $1 ]; then
        echo "Missing database name"
        return 1
    fi

    if [ ! -f $2 ]; then
        echo "Missing file path"
        return 1
    fi

    cat "$2" | psql -d "$1" -h 127.0.0.1 -U postgres
}

iconv-recursive() {
    find . -type f -name '*.html' -o -name '*.html.erb' | while read file
    do
        echo $file
        iconv -f CP1251 -t UTF-8 "$file" > tmp
        mv -f tmp "$file"
    done
}

remove-layout() {
    if [ -z $1 ]
    then
        echo "Empty pattern"
        return 1
    fi

    find . -type f -name '*.html' -o -name '*.html.erb' | while read file
    do
        echo $file
        sed -n "$1" "$file" | sed '1d' | sed '$d' > tmp
        mv -f tmp "$file"
    done
}

restmode() {
  if [ -z $1 ]; then
      echo "Empty path"
      return 1
  fi

  find "$1" -type d -exec chmod 0755 {} \;
  find "$1" -type f -exec chmod 0644 {} \;
}

# docker
alias docker='pgrep com.docker.hyperkit &> /dev/null || (open /Applications/Docker.app && until docker info &> /dev/null ; do sleep 1; done) && docker'
alias docker-compose='pgrep com.docker.hyperkit &> /dev/null || (open /Applications/Docker.app && until docker info &> /dev/null ; do sleep 1; done) && docker-compose'
alias docker-sen='docker run -v /var/run/docker.sock:/run/docker.sock -ti --rm -e TERM tomastomecek/sen'
alias dc-pg='docker run -d -p 5432:5432 --name pg -e POSTGRES_PASSWORD=postgres -d postgres'
alias dc-redis='docker run -d -p 6379:6379 --name redis redis'
alias dc-es='docker run -d -p 9200:9200 --name es elasticsearch'
alias dc-es2='docker run -d -p 9200:9200 --name es2 elasticsearch:2'
alias dc-es14='docker run -d -p 9200:9200 --name es14 elasticsearch:1.4'

# misc
alias pgen8='pwgen -Cs 8 1 | tr -d " " | tr -d "\n" | pbcopy'
alias pgen15='pwgen -Cs 15 1 | tr -d " " | tr -d "\n" | pbcopy'
alias workhard='cat /etc/hosts | sed "/127.0.0.1 vk.com/s/^#//g" | sudo tee /etc/hosts'
alias procrastinate='cat /etc/hosts | sed "/127.0.0.1 vk.com/s/^/#/g" | sudo tee /etc/hosts'

rscreen() {
    if [ -z $1 ]; then
        echo "Specify FQDN"
        return 1
    fi

    ssh "$1" -t screen -R
}


crypt() {
    echo "Crypt into file $1: $2"
    echo "$2" | openssl enc -aes-256-cbc -salt > "$1"
}

decrypt() {
    echo "Decrypt file $1"
    openssl enc -aes-256-cbc -d -in "$1"
}

function find-big-files {
    find / -size +100M 2> /dev/null
}

function smux() {
  if [ -z $1 ]; then
    echo "Specify FQDN"
    return 1
  fi

  ssh "$1" -t "tmux -CC attach || tmux -CC"
}

# rcntec

csrgen-rcntec() {
    if [ -z $1 ]; then
        echo "Specify FQDN"
        return 1
    fi

    openssl req -newkey rsa:2048 -sha256 -nodes -keyout "${1}.key" -out "${1}.csr" -subj "/C=RU/ST=Moscow/O=RCNTEC/CN=${1}/emailAddress=webmaster@${1}"
    openssl x509 -req -days 365 -in "${1}.csr" -signkey "${1}.key" -out "${1}.crt"
}

sshrc() {
    if [ -z $1 ]; then
        echo "Specify FQDN"
        return 1
    fi

    ssh "deploy@${1}.srv.rcntec.com"
}

check() {
  if [ -z $1 ]; then
      echo "Empty host"
      return 1
  fi

  ssh "$1" sudo su itm -c /home/itm/scripts/all
}
